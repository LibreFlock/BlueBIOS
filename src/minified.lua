local component=component;local computer=computer;local a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A,B,C;a=component.proxy(component.list("gpu")())a.bind(component.proxy(component.list("screen")()).address)b,c=a.getResolution()a.setBackground(0x003150)d=function(D,E,F,G)if G then return pcall(component.invoke,D,E,F,G)else return pcall(component.invoke,D,E,F)end end;function e(D,H)if H then n,o=d(D,"open",H)else n,o=d(D,"open","/init.lua")end;if n then _,v=d(D,"read",o,math.maxinteger)d(D,"close",o)return v else return false end end;function g(I)a.fill(1,1,b,c," ")return a.set(math.ceil(b/2-#I/2),math.ceil(c/2),I)end;function w()_G.buffer={}_G.print=function(J)for _ in string.gmatch(tostring(J),"[^\r\n]+")do if#tostring(J)>b then for K=1,math.ceil(#tostring(J)/b)do buffer[#buffer+1]=string.sub(tostring(J),K==1 and 1 or b*(K-1),b*K)end else buffer[#buffer+1]=tostring(J)end end end;buffer[1]="bootloader> "x=false;y=false;B=""::L::g("")for K=1,c do if buffer[#buffer-K+1]then a.set(1,c-K+1,buffer[#buffer-K+1])end end;r,_,A,s=computer.pullSignal(1)if not A then if r=="key_down"then if s==42 or s==54 then x=true elseif s==58 then y=not y end elseif r=="key_up"then if s==42 or s==54 then x=false end end else if r=="key_down"then if s==28 then if B=="exit"then return elseif B=="shutdown"then computer.shutdown()end;m,C=pcall(load(B))if C then for _ in string.gmatch(C,"[^\r\n]+")do if#C>b then for K=1,math.ceil(#C/b)do buffer[#buffer+1]=string.sub(C,K==1 and 1 or b*(K-1),b*K)end else buffer[#buffer+1]=C end end end;buffer[#buffer+1]="bootloader> "B=""goto L elseif s==14 then if#buffer[#buffer]>12 then B=string.sub(B,1,#B-1)buffer[#buffer]=string.sub(buffer[#buffer],1,#buffer[#buffer]-1)end;goto L elseif A<127 and A>31 then z=string.char(A)if x or y then z=string.upper(z)end;buffer[#buffer]=buffer[#buffer]..z;B=B..z end end end;goto L end;g("Hold ALT to stay in bootloader")h=component.proxy(component.list("eeprom")())function computer.getBootAddress()return h.getData()end;function computer.setBootAddress(M)return h.setData(M)end;i=computer.getBootAddress()j=e(i)if j then k=i else for K in pairs(component.list("filesystem"))do j=e(K)k=K;if j then computer.setBootAddress(K)break end end end::N::l=component.invoke(k,"getLabel")m=component.invoke(k,"list","/bios/plugins/")if m then for _,O in ipairs(m)do if not O:match(".*/$")then o=component.invoke(k,"open","/bios/plugins/"..O)load(component.invoke(k,"read",o,math.huge)or"")()end end else n=pcall(component.invoke,k,"makeDirectory","/bios/plugins/")if n then goto N end end;p=computer.uptime()if not j then goto q end;if not q then repeat r,_,_,s=computer.pullSignal(1)if r=="key_down"and s==(56 or 184)then q=true end until p+1<=computer.uptime()end::P::if not q then g("Booting to "..(l~=nil and l or"N/A").." ("..k..")")return load(j)()end::q::q=false;f=e(i,"/bios/bl.bin")if f then goto Q end;if k then for K in component.list("filesystem")do f=e(K,"/bios/bl.bin")if f then break end end end;if not f then t=component.list("internet")()if t then if component.invoke(t,"isHttpEnabled")then u=component.invoke(t,"request","https://raw.githubusercontent.com/OpenGCX/BlueBIOS/main/binaries/bl.bin")if u then v=u.read()if v then f=v;if k then n,o=d(k,"open","/bios/bl.bin","w")if n then d(k,"write",o,f)d(k,"close",o)end end end end end end end::Q::if f then load(f)()else g("")w()end;goto P
