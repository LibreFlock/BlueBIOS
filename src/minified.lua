local component=component or require("component")local computer=computer or require("computer")computer.setArchitecture("Lua 5.4")local a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z;l=computer.uptime()_G.blue={}blue.fn={}blue.vb={}a=component.proxy(component.list("gpu")())a.bind(component.proxy(component.list("screen")()).address)b,c=a.getResolution()if a.getDepth()>1 then a.setForeground(0x9cc3db)a.setBackground(0x003150)end;d=function(A,B,C,D)if D then return pcall(component.invoke,A,B,C,D)else return pcall(component.invoke,A,B,C)end end;function e(A,E)j,k=d(A,"open",E)if j then q=""::F::_,x=d(A,"read",k,math.maxinteger)if x then q=q..x;goto F end;d(A,"close",k)return q else return false end end;function g(G)a.fill(1,1,b,c," ")return a.set(math.ceil(b/2-#G/2),math.ceil(c/2),G)end;function blue.fn.shell()_G.buffer={}_G.print=function(H)for _ in string.gmatch(tostring(H),"[^\r\n]+")do if#tostring(H)>b then for I=1,math.ceil(#tostring(H)/b)do buffer[#buffer+1]=string.sub(tostring(H),I==1 and 1 or b*(I-1),b*I)end else buffer[#buffer+1]=tostring(H)end end end;buffer[1]="bootloader> "r=false;s=false;v=""::J::g("")if a.getDepth()>1 then a.setForeground(0x9cc3db)a.setBackground(0x003150)end;for I=1,c do if buffer[#buffer-I+1]then if I==1 and a.getDepth()>1 then a.setForeground(0xaec5d4)a.set(1,c-I+1,buffer[#buffer-I+1])a.setForeground(0x9cc3db)else a.set(1,c-I+1,buffer[#buffer-I+1])end end end;m,_,u,n=computer.pullSignal()if not u then if m=="key_down"then if n==42 or n==54 then r=true elseif n==58 then s=not s end elseif m=="key_up"then if n==42 or n==54 then r=false end end else if m=="key_down"then if n==28 then if v=="exit"then return elseif v=="reboot"then computer.shutdown(1)elseif v=="shutdown"then computer.shutdown()end;i,w=pcall(load(v))if w then for _ in string.gmatch(w,"[^\r\n]+")do if#w>b then for I=1,math.ceil(#w/b)do buffer[#buffer+1]=string.sub(w,I==1 and 1 or b*(I-1),b*I)end else buffer[#buffer+1]=w end end end;buffer[#buffer+1]="bootloader> "v=""goto J elseif n==14 then if#buffer[#buffer]>12 then v=string.sub(v,1,#v-1)buffer[#buffer]=string.sub(buffer[#buffer],1,#buffer[#buffer]-1)end;goto J elseif u<127 and u>31 then t=string.char(u)if r or s then t=string.upper(t)end;buffer[#buffer]=buffer[#buffer]..t;v=v..t end end end;goto J end;g("Hold ALT to stay in bootloader")h=component.proxy(component.list("eeprom")())function computer.getBootAddress()return h.getData()end;function computer.setBootAddress(K)return h.setData(K)end;z=computer.getBootAddress()blue.vb.init=e(z,"/init.lua")if not blue.vb.init then blue.vb.init=e(z,"/OS.lua")end;if blue.vb.init and blue.vb.init~=""and component.invoke(z,"getLabel")~="tmpfs"then blue.vb.boot_drive=z else for I in pairs(component.list("filesystem"))do blue.vb.init=e(I,"/init.lua")if not blue.vb.init then blue.vb.init=e(I,"/OS.lua")end;blue.vb.boot_drive=I;if blue.vb.init and blue.vb.init~=""then computer.setBootAddress(I)break end end end::L::blue.vb.boot_label=component.invoke(blue.vb.boot_drive,"getLabel")i=component.invoke(blue.vb.boot_drive,"list","/bios/plugins/")_,y=d(blue.vb.boot_drive,"isReadOnly")if i then for _,M in ipairs(i)do if not M:match(".*/$")then k=component.invoke(blue.vb.boot_drive,"open","/bios/plugins/"..M)load(component.invoke(blue.vb.boot_drive,"read",k,math.huge)or"")()end end else if not y then j=pcall(component.invoke,blue.vb.boot_drive,"makeDirectory","/bios/plugins/")if j then goto L end end end;if not blue.vb.init then goto N end;m,_,_,n=computer.pullSignal(1)if m=="key_down"and n==(56 or 184)then goto N end;repeat m,_,_,n=computer.pullSignal(1)if m=="key_down"and n==(56 or 184)then goto N end until l+1<=computer.uptime()::O::if a.getDepth()>1 then g("Booting to "..(blue.vb.boot_label~=nil and blue.vb.boot_label or"N/A").." ("..blue.vb.boot_drive..")")else g("Booting to "..(blue.vb.boot_label~=nil and blue.vb.boot_label or"N/A"))end;load(blue.vb.init)()::N::f=e(blue.vb.boot_drive,"/bios/bl.bin")if f then goto P end;if component.list("filesystem")()then for I in component.list("filesystem")do f=e(I,"/bios/bl.bin")if f then break end end end;if not f then o=component.list("internet")()if o then if component.invoke(o,"isHttpEnabled")then p=component.invoke(o,"request","https://raw.githubusercontent.com/OpenGCX/BlueBIOS/main/binaries/bl.bin")if p then q=""::F::x=p.read()if x then q=q..x;goto F end;if not q==""and q then f=q;if blue.vb.boot_drive then if not y then j,k=d(blue.vb.boot_drive,"open","/bios/bl.bin","w")if j then d(blue.vb.boot_drive,"write",k,f)d(blue.vb.boot_drive,"close",k)end end end end end end end end::P::if f and f~=""then load(f)()else g("")blue.fn.shell()end;if blue.vb.init then goto O else computer.shutdown(1)end