local component=component;local computer=computer;computer.setArchitecture("Lua 5.4")local a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,A;a=component.proxy(component.list("gpu")())a.bind(component.proxy(component.list("screen")()).address)_G.blue={}blue.vb={}blue.fn={}b,c=a.getResolution()if a.getDepth()>1 then a.setForeground(0x9cc3db)a.setBackground(0x003150)end;d=function(B,C,D,E)if E then return pcall(component.invoke,B,C,D,E)else return pcall(component.invoke,B,C,D)end end;function e(B,F)k,l=d(B,"open",F)if k then r=""::G::_,y=d(B,"read",l,math.maxinteger)if y then r=r..y;goto G end;d(B,"close",l)return r else return false end end;function g(H)a.fill(1,1,b,c," ")return a.set(math.ceil(b/2-#H/2),math.ceil(c/2),H)end;function blue.fn.shell()_G.buffer={}_G.print=function(I)for _ in string.gmatch(tostring(I),"[^\r\n]+")do if#tostring(I)>b then for J=1,math.ceil(#tostring(I)/b)do buffer[#buffer+1]=string.sub(tostring(I),J==1 and 1 or b*(J-1),b*J)end else buffer[#buffer+1]=tostring(I)end end end;buffer[1]="bootloader> "s=false;t=false;w=""::K::g("")if a.getDepth()<1 then a.setBackground(0x003150)end;for J=1,c do if buffer[#buffer-J+1]then if J==1 and a.getDepth()<1 then a.setForeground(0xaec5d4)a.set(1,c-J+1,buffer[#buffer-J+1])a.setForeground(0x9cc3db)else a.set(1,c-J+1,buffer[#buffer-J+1])end end end;n,_,v,o=computer.pullSignal(1)if not v then if n=="key_down"then if o==42 or o==54 then s=true elseif o==58 then t=not t end elseif n=="key_up"then if o==42 or o==54 then s=false end end else if n=="key_down"then if o==28 then if w=="exit"then return elseif w=="reboot"then computer.shutdown(1)elseif w=="shutdown"then computer.shutdown()end;j,x=pcall(load(w))if x then for _ in string.gmatch(x,"[^\r\n]+")do if#x>b then for J=1,math.ceil(#x/b)do buffer[#buffer+1]=string.sub(x,J==1 and 1 or b*(J-1),b*J)end else buffer[#buffer+1]=x end end end;buffer[#buffer+1]="bootloader> "w=""goto K elseif o==14 then if#buffer[#buffer]>12 then w=string.sub(w,1,#w-1)buffer[#buffer]=string.sub(buffer[#buffer],1,#buffer[#buffer]-1)end;goto K elseif v<127 and v>31 then u=string.char(v)if s or t then u=string.upper(u)end;buffer[#buffer]=buffer[#buffer]..u;w=w..u end elseif n=="clipboard"then buffer[#buffer]=buffer[#buffer]..v;w=w..v end end;goto K end;g("Hold ALT to stay in bootloader")_G.eeprom=component.proxy(component.list("eeprom")())function computer.getBootAddress()return eeprom.getData()end;function computer.setBootAddress(L)return eeprom.setData(L)end;h=computer.getBootAddress()blue.vb.init=e(h,"/init.lua")if not blue.vb.init or blue.vb.init==""then blue.vb.init=e(h,"/OS.lua")end;if blue.vb.init and blue.vb.init~=""and component.invoke(h,"getLabel")~="tmpfs"then blue.vb.boot_drive=h else for J in pairs(component.list("filesystem"))do blue.vb.init=e(J,"/init.lua")blue.vb.boot_drive=J;if not blue.vb.init or blue.vb.init==""then blue.vb.init=e(J,"/OS.lua")end;if blue.vb.init and blue.vb.init~=""then computer.setBootAddress(J)break end end end::M::blue.vb.boot_label=component.invoke(blue.vb.boot_drive,"getLabel")j=component.invoke(blue.vb.boot_drive,"list","/bios/plugins/")_,z=d(blue.vb.boot_drive,"isReadOnly")if j then for _,N in ipairs(j)do if not N:match(".*/$")then l=component.invoke(blue.vb.boot_drive,"open","/bios/plugins/"..N)load(component.invoke(blue.vb.boot_drive,"read",l,math.huge)or"")()end end else if not z then k=pcall(component.invoke,blue.vb.boot_drive,"makeDirectory","/bios/plugins/")if k then goto M end end end;m=computer.uptime()if not blue.vb.init then goto O end;repeat n,_,_,o=computer.pullSignal(1)if n=="key_down"and o==(56 or 184)then goto O end until m+1<=computer.uptime()::P::if a.getDepth()>1 then g("Booting to "..(blue.vb.boot_label~=nil and blue.vb.boot_label or"N/A").." ("..blue.vb.boot_drive..")")else g("Booting to "..(blue.vb.boot_label~=nil and blue.vb.boot_label or"N/A"))end;load(blue.vb.init)()::O::f=e(i,"/bios/bl.bin")if f then goto Q end;for J in component.list("filesystem")do f=e(J,"/bios/bl.bin")if f and f~=""then goto Q end end;if not f or f==""then p=component.list("internet")()if p then if component.invoke(p,"isHttpEnabled")then q=component.invoke(p,"request","https://raw.githubusercontent.com/LibreFlock/BlueBIOS/main/binaries/bl.bin")if q then r=""::G::y=q.read()if y then r=r..y;goto G end;if r and r~=""then f=r;if blue.vb.boot_drive then if not z then k,l=d(blue.vb.boot_drive,"open","/bios/bl.bin","w")if k then d(blue.vb.boot_drive,"write",l,f)d(blue.vb.boot_drive,"close",l)end end end end end end end end::Q::if f and f~=""then load(f)()else g("")blue.fn.shell()end;if blue.vb.init and blue.vb.init~=""then goto P else computer.shutdown(1)end
